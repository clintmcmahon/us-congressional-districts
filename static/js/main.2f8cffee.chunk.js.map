{"version":3,"sources":["ControlPanel.js","Districts.js","About.js","App.js","serviceWorker.js","index.js"],"names":["ControlPanel","props","member","district","party","education","residence","born","hoveredDistrict","properties","REP","rep","JSON","parse","Member","District","Party","Education","Residence","Born","className","Row","Col","xs","Districts","mapboxgl","accessToken","process","mapContainer","useRef","useState","long","setLong","lat","setLat","zoom","setZoom","_setHoveredDistrict","hoveredDistrictRef","setHoveredDistrict","data","current","useEffect","map","Map","container","style","center","generateId","addControl","NavigationControl","once","on","e","getCanvas","cursor","features","length","id","setFeatureState","source","sourceLayer","hover","getCenter","lng","toFixed","getZoom","resize","height","ref","About","Container","href","App","Navbar","bg","variant","Brand","Nav","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2f8cffee.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nfunction ControlPanel(props) {\r\n    let member = \"\";\r\n    let district = \"\";\r\n    let party = \"\";\r\n    let education = \"\";\r\n    let priorExperience = \"\";\r\n    let assumedOffice = \"\";\r\n    let residence = \"\";\r\n    let born = \"\";\r\n\r\n    if (props.hoveredDistrict && props.hoveredDistrict.properties.REP) {\r\n        let rep = JSON.parse(props.hoveredDistrict.properties.REP);\r\n        member = rep.Member;\r\n        district = rep.District;\r\n        party = rep.Party;\r\n        education = rep.Education;\r\n        priorExperience = rep[\"Prior experience\"];\r\n        assumedOffice = rep[\"Assumed office\"];\r\n        residence = rep.Residence;\r\n        born = rep.Born;\r\n\r\n        return (\r\n            <div className=\"control-panel\">\r\n                <Row>\r\n                    <Col xs={12}>\r\n                        <div className=\"name\">{member}</div>\r\n                        \r\n                        <div className=\"value\"><span className=\"font-weight-bold\">District: </span> {district}</div>\r\n                        <div className=\"value\"><span className=\"font-weight-bold\">Party: </span> {party}</div>\r\n                        <div className=\"value\"><span className=\"font-weight-bold\">Education: </span> {education}</div>\r\n                        <div className=\"value\"><span className=\"font-weight-bold\">Prior experience: </span> {rep[\"Prior experience\"]}</div>\r\n                        <div className=\"value\"><span className=\"font-weight-bold\">Assumed office: </span> {rep[\"Assumed office\"]}</div>\r\n                        <div className=\"value\"><span className=\"font-weight-bold\">Residence: </span> {residence}</div>\r\n                        <div className=\"value\"><span className=\"font-weight-bold\">Born: </span> {born}</div>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <div className=\"control-panel\">\r\n                <Row>\r\n                    <Col xs={12}>\r\n                        <div className=\"name\">Hover over a district</div>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default ControlPanel;","import React, { useState, useEffect, useRef } from \"react\";\r\nimport mapboxgl from 'mapbox-gl';\r\nimport ControlPanel from \"./ControlPanel\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nfunction Districts(props) {\r\n\r\n    //Assign the Mapbox token from the environment variable set in .env\r\n    mapboxgl.accessToken = process.env.REACT_APP_MAPBOX_KEY;\r\n\r\n    const mapContainer = useRef(null);\r\n    const [long, setLong] = useState(-98);\r\n    const [lat, setLat] = useState(39);\r\n    const [zoom, setZoom] = useState(3.5);\r\n    const [hoveredDistrict, _setHoveredDistrict] = useState(null);\r\n\r\n    const hoveredDistrictRef = useRef(hoveredDistrict);\r\n\r\n    const setHoveredDistrict = data => {\r\n        hoveredDistrictRef.current = data;\r\n        _setHoveredDistrict(data);\r\n    };\r\n\r\n    useEffect(() => {\r\n\r\n        let map = new mapboxgl.Map({\r\n            container: mapContainer.current,\r\n            style: \"mapbox://styles/msoftware/ckaa9m3sd1esj1ipe52icltqv\",\r\n            center: [long, lat],\r\n            zoom: zoom,\r\n            generateId: true\r\n\r\n        });\r\n\r\n\r\n        // Add zoom and rotation controls to the map.\r\n        map.addControl(new mapboxgl.NavigationControl());\r\n\r\n        map.once(\"load\", function () {\r\n\r\n            map.on('mousemove', 'data', function (e) {\r\n                map.getCanvas().style.cursor = \"pointer\";\r\n                if (e.features.length > 0) {\r\n\r\n                    //Set the hover to false if there is an existing district\r\n                    if (hoveredDistrictRef.current && hoveredDistrictRef.current.id !== e.features[0].id) {\r\n                        map.setFeatureState(\r\n                            { source: 'composite', sourceLayer: \"data\", id: hoveredDistrictRef.current.id },\r\n                            { hover: false }\r\n                        );\r\n                    }\r\n\r\n                    let hoveredDistrict = e.features[0];\r\n                    map.setFeatureState(\r\n                        { source: 'composite', sourceLayer: \"data\", id: hoveredDistrict.id },\r\n                        { hover: true }\r\n                    );\r\n\r\n\r\n                    setHoveredDistrict(hoveredDistrict);\r\n                }\r\n\r\n            });\r\n\r\n            // When the mouse leaves the state-fill layer, update the feature state of the\r\n            // previously hovered feature.\r\n            map.on('mouseleave', 'data', function () {\r\n                if (hoveredDistrictRef.current) {\r\n\r\n                    map.setFeatureState(\r\n                        { source: 'composite', sourceLayer: \"data\", id: hoveredDistrictRef.current.id },\r\n                        { hover: false }\r\n                    );\r\n\r\n                }\r\n                setHoveredDistrict(null);\r\n            });\r\n\r\n            map.on('move', () => {\r\n                const { lng, lat } = map.getCenter();\r\n\r\n                setLong(lng.toFixed(4));\r\n                setLat(lat.toFixed(4));\r\n                setZoom(map.getZoom().toFixed(2));\r\n            });\r\n\r\n            map.resize();\r\n        });\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"map-wrapper\">\r\n            <div id=\"districtDetailMap\" className=\"district-map\">\r\n                <div style={{ height: \"100%\" }} ref={mapContainer}>\r\n                    <ControlPanel hoveredDistrict={hoveredDistrict} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Districts;","import React from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nfunction About(props) {\r\n    return (\r\n        <Container className=\"mt-5\">\r\n            <Row>\r\n                <Col xs={12}>\r\n                    <h1>About This Project</h1>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col xs={12}>\r\n                    This is a side project meant to give people a quick overview of the current US congressional districts as well as who represents them.\r\n                    The district locations come from a TIGER/Line Shapefile available on the <a href=\"https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.html\">US Census website</a>. All representative data comes from the <a href=\"https://en.wikipedia.org/wiki/List_of_current_members_of_the_United_States_House_of_Representatives\">list of current members of the US House of Representatives Wikipedia page</a>.\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col xs={12} className=\"pt-4\">\r\n                    <h2>\r\n                        Current Map Dataset\r\n                    </h2>\r\n                    <div>\r\n                        2019 - All legal boundaries and names are as of January 1, 2019. Released August 9, 2019.\r\n                    </div>\r\n\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport {\r\n  Switch,\r\n  Route,\r\n  BrowserRouter as Router,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport './App.css';\r\nimport Districts from './Districts';\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport About from \"./About\";\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Navbar bg=\"dark\" variant=\"dark\">\r\n        <Navbar.Brand href=\"/\">US Congressional District Map (2019)</Navbar.Brand>\r\n        <Nav className=\"mr-auto\">\r\n          <Link to=\"/\" className=\"nav nav-link\">Home</Link>\r\n          <Link to=\"/about\" className=\"nav nav-link\">About</Link>\r\n        </Nav>\r\n      </Navbar>\r\n    \r\n      <Switch>\r\n        <Route exact path=\"/about\" component={About} />\r\n        <Route exact path=\"/\" component={Districts} />\r\n      </Switch>\r\n\r\n      </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}